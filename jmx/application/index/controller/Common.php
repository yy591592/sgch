<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/8/22
 * Time: 9:06
 */

namespace app\index\controller;

use think\Controller;
use think\Db;
use Config;
use app\index\validate\DataValidate;//引入自定义验证类
use AlibabaCloud\Client\AlibabaCloud;
use AlibabaCloud\Client\Exception\ClientException;
use AlibabaCloud\Client\Exception\ServerException;


/**
 * Class Common
 * @package app\index\controller
 * 公共控制器
 */
class Common extends Controller
{
    const APPID = "wxe4372aef592ae551"; //小程序APPID
    const APPSECRET = "e21a7162655099c1d98bb62911bf75c2";//小程序APPSECRET
    const mch_id = '1555466351';                //商户号
    const key = 'FSVNhaVhz4mxSYv12GlpBxlxVy1GNFu6';                //商户key
    public $model;
    public $page = 1;
    public $limit = 10;
    public $field = "*";
    public $detail_field = "*";
    public $order = "id DESC";

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $namespace = 'app\common\model';
        $class_name = request()->controller();
        if (class_exists($namespace . '\\' . $class_name)) {    //判断是否存在对应的模型
            $this->model = model(strtolower($class_name));
        }
    }


    /**
     * @return array
     * 列表查询条件
     */
    public function map()
    {
        return [];
    }

    /**
     * 详情页查询条件
     */
    public function detail_map()
    {
        return [];
    }

    /**
     * 数据验证
     * @param type $data 验证数据
     * @param type $scene 验证场景
     * @return type
     */
    public function check($data, $scene)
    {
        $validate = new DataValidate();
        if (!$validate->scene($scene)->check($data)) {
            return json(["status" => "fail", "msg" => $validate->getError()]);   //返回验证信息
        } else {
            return false;   //没有错误信息返回
        }
    }

    /**
     * 获取列表
     */
    public function index()
    {
        $result = $this->model->getList($this->map(), $this->page, $this->limit, $this->field, $this->order);
        return json(["status" => "success", "count" => $result["count"], "data" => $result["list"], "pages" => $result["pages"]]);
    }


    public function detail()
    {
        $map = $this->detail_map();
        if (count($map) == 0) {
            $map["id"] = $this->request->param("id");
        }
        $data = $this->model->getOneData($map, $this->detail_field);
        if (!empty($data['images'])){
            $img = json_decode($data['images']);
            $data['images'] = $img;
        }
        return json(["status" => "success", "data" => $data]);
    }

    /**
     * 获取access_token
     */
    public function getAccessToken()
    {
        $result = Db::name("gym_access_token")->find();    //获取access_token
        if ($result) {    //如果数据不存在，那么生成数据
            $access_token = self::setAccessToken();
            $data["accesss_token"] = $access_token["access_token"];
            $data["createtime"] = time();
            $data["expirestime"] = time() + $access_token["expires_in"];
            Db::name("gym_access_token")->insert($data);
            return $access_token["access_token"];   //入库后返回当前access_token
        } else {  //如果数据存在
            if ($result["expirestime"] < time()) {    //如果access_token已过期，那么重新生成
                $access_token = self::setAccessToken();
                $data["accesss_token"] = $access_token["access_token"];
                $data["createtime"] = time();
                $data["expirestime"] = time() + $access_token["expires_in"];
                Db::name("gym_access_token")->where(["id" => 1])->update($data);    //更新凭证
                return $access_token["access_token"];   //返回当前获取凭证
            } else {  //如果凭证在有效期内,那么直接返回当前数据库保存的凭证即可
                return $result["access_token"];
            }
        }

    }

    /**
     * 生成access_token
     */
    public function setAccessToken()
    {
        $url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=" . self::APPID . "&secret=" . self::APPSECRET;
        $result = http_curl($url);
        return $result;
    }


    /**
     * 验证码(阿里云短信)
     */

    public function smsVerify($mobile, $code, $tempId)

    {
        $accessKeyId = "";
        $accessKeySecret = "";
        AlibabaCloud::accessKeyClient($accessKeyId, $accessKeySecret)
            ->regionId('ydy')
            ->asDefaultClient();
        try {
            $request = AlibabaCloud::rpc()
                //smsapi为短信单发接口
                ->product('smsapi')
//                ->set
//                ->scheme('https')// https | http
                ->version('2017-05-25')
                ->action('SendSms')
                ->method('GET')
                ->options([
                    'query' => [
                        'PhoneNumbers' => "18329110727",
                        'SignName' => "UU跑腿",
                        'TemplateCode' => "SMS_175121783",
                        'TemplateParam' => "{\"code\":\"123456\"}",
                    ],
                ]);
            $result = $request->request();
            if ($result->getStatusCode() == "200") {
                return json(["code" => 1, "msg" => "短信发送成功"]);
            } else {
                return json(["code" => 0, "msg" => "短信发送失败"]);
            }
        } catch (ClientException $e) {
            return json(["code" => 0, "msg" => "短信发送失败", "error" => $e->getErrorMessage()]);
        } catch (ServerException $e) {
            return json(["code" => 0, "msg" => "短信发送失败", "error" => $e->getErrorMessage()]);
        }

    }






}